https://github.com/barryvdh/laravel-cors/issues/63
https://laracasts.com/discuss/channels/requests/laravel-5-cors-headers-with-filters?page=3

https://www.sitepoint.com/how-to-build-an-api-only-jwt-powered-laravel-app/
/Users/mohammadselimmiah/Sites/Api/rhcApi

https://www.sitepoint.com/how-to-build-an-api-only-jwt-powered-laravel-app/
git clone https://github.com/francescomalatesta/laravel-api-boilerplate-jwt Laravel-Api
cd Laravel-Api
composer install
$ php artisan clear-compiled
$ php artisan optimize
$ cat .env|grep -i key
$ php artisan key:generate
$ cat .env|grep -i key
$ php artisan jwt:generate
$ cat config/jwt.php |egrep '=>'
$ cat config/boilerplate.php |egrep '=>'
Configure .env for database. DB_HOST=localhost:8889
$ php artisan migrate
$ php artisan serve

you will find the above few commands in the composer.json file

"scripts": {
        "post-root-package-install": [
            "php -r \"copy('.env.example', '.env');\""
        ],
        "post-create-project-cmd": [
            "php artisan key:generate"
        ],
        "post-install-cmd": [
            "Illuminate\\Foundation\\ComposerScripts::postInstall",
            "php artisan optimize",
            "php artisan key:generate",
            "php artisan jwt:generate"
        ],
        "post-update-cmd": [
            "Illuminate\\Foundation\\ComposerScripts::postUpdate",
            "php artisan optimize"
        ]
    },

Route information is in the App\Providers\RouteServiceProvider:
protected function mapWebRoutes(Router $router)
    {
        $router->group([
            'namespace' => $this->namespace, 'middleware' => 'web',
        ], function ($router) {
            require app_path('Http/api_routes.php');
            require app_path('Http/routes.php');
        });
    }

$ php artisan api:routes 
//this will provide bunch of api routes

http://localhost:8000/api/auth/signup
{"message":"405 Method Not Allowed","status_code":405}
//that is because we didn't provide required fields. 
signup() method at app/Api/V1/Controllers/AuthController.php, 
Validator::make($userData, Config::get('boilerplate.signup_fields_rules'));

in the config/boilerplate.php

signup_fields_rules' => [
    	'name' => 'required',
    	'email' => 'required|email|unique:users',
    	'password' => 'required|min:6'
    ]

$ pwd
/Users/mohammadselimmiah/Sites/Api/Laravel
curl -X POST -F 'name=Mohammad Miah' -F 'email=selimcse98@gmail.com' -F 'password=something' http://localhost:8000/api/auth/signup
//passing form data: name, email and password
//You can use postman

$ curl -X POST -F 'name=davidwalsh' -F 'email=davidwalsh@test.com' -F 'password=something' http://localhost:8000/api/auth/signup
{"token":"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOjIsImlzcyI6Imh0dHA6XC9cL2xvY2FsaG9zdDo4MDAwXC9hcGlcL2F1dGhcL3NpZ251cCIsImlhdCI6MTQ3NDE2MzkwMywiZXhwIjoxNDc0MTY3NTAzLCJuYmYiOjE0NzQxNjM5MDMsImp0aSI6IjE2NDQ5YzExZTU5Yjc5NzBmZTg0MjI1NmY3ZDNkYzFjIn0.mp3n0MO5nXSD2_7XIvsp4fw0PtJu4njfTuPftV9MPRQ"}

curl -X POST -F 'email=davidwalsh@test.com' -F 'password=something' http://localhost:8000/api/auth/login
curl -X POST -F 'email=selimcse98@gmail.com' -F 'password=something' http://localhost:8000/api/auth/login

$ curl -X POST -F 'email=davidwalsh@test.com' -F 'password=something' http://localhost:8000/api/auth/login
{"token":"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOjIsImlzcyI6Imh0dHA6XC9cL2xvY2FsaG9zdDo4MDAwXC9hcGlcL2F1dGhcL2xvZ2luIiwiaWF0IjoxNDc0MTY0ODQyLCJleHAiOjE0NzQxNjg0NDIsIm5iZiI6MTQ3NDE2NDg0MiwianRpIjoiYmVjMjc2NDUxYjViYmZhYjVlOTU0ODYwZjgwMGYxM2YifQ.sNoh--wvdGH12DgTyCttmz4O2mh4_Sc-cF9uOiclfRI"}

$ php artisan make:migration create_books_table --create=books
//migration file will be created for books table


$ curl -X POST -F 'name=Mohammad1' -F 'email=test1@gmail.com' -F 'password=something' http://www.api.remoteselfcare.com/rhcApi/api/auth/signup
//User created in DB and returns token

Schema::create('books', function (Blueprint $table) {
        $table->increments('id');
        $table->string('title');
        $table->string('author_name');
        $table->integer('pages_count');
        $table->integer('user_id')->index();
        $table->timestamps();
    });

php artisan migrate
======================== database ========================
$ mysql -u root -p
Enter password: root
mysql> show databases;
mysql> use jwtAPI;
mysql> show tables;
mysql> show create table books;
CREATE TABLE `books` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `title` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `author_name` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `pages_count` int(11) NOT NULL,
  `user_id` int(11) NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `books_user_id_index` (`user_id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci

mysql> desc books;
+-------------+------------------+------+-----+---------+----------------+
| Field       | Type             | Null | Key | Default | Extra          |
+-------------+------------------+------+-----+---------+----------------+
| id          | int(10) unsigned | NO   | PRI | NULL    | auto_increment |
| title       | varchar(255)     | NO   |     | NULL    |                |
| author_name | varchar(255)     | NO   |     | NULL    |                |
| pages_count | int(11)          | NO   |     | NULL    |                |
| user_id     | int(11)          | NO   | MUL | NULL    |                |
| created_at  | timestamp        | YES  |     | NULL    |                |
| updated_at  | timestamp        | YES  |     | NULL    |                |
+-------------+------------------+------+-----+---------+----------------+
7 rows in set (0.01 sec)

CREATE TABLE `users` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `email` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `password` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `remember_token` varchar(100) COLLATE utf8_unicode_ci DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `users_email_unique` (`email`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci 


$ php artisan make:model Book
//will create Book model under App folder
class Book extends Model
{
    protected $fillable = ['title', 'author_name', 'pages_count'];
}

Now, we have to edit our User model in order to define the relationship we will need to retrieve their related books. In app\User.php we add the following method:

public function books()
{
    return $this->hasMany('App\Book');
}

$ php artisan make:controller BookController
to create a new resource controller. Laravel will create it in the app/Http/Controllers folder. We will move it to app/Api/V1/Controllers. We also change the namespace:
namespace App\Api\V1\Controllers;
use App\Http\Controllers\Controller;

Add the following code into api_routes.php:
$api->group(['middleware' => 'api.auth'], function ($api) {
	$api->post('book/store', 'App\Api\V1\Controllers\BookController@store');
	$api->get('book', 'App\Api\V1\Controllers\BookController@index');
});

$ php artisan api:routes
+------+----------+-----------------+------+---------------------------------------------+-----------+------------+----------+------------+
| Host | Method   | URI             | Name | Action                                      | Protected | Version(s) | Scope(s) | Rate Limit |
+------+----------+-----------------+------+---------------------------------------------+-----------+------------+----------+------------+
|      | POST     | /api/book/store |      | App\Api\V1\Controllers\BookController@store | Yes       | v1         |          |            |
|      | GET|HEAD | /api/book       |      | App\Api\V1\Controllers\BookController@index | Yes       | v1         |          |            |
+------+----------+-----------------+------+---------------------------------------------+-----------+------------+----------+------------+

$api->get('protected', ['middleware' => ['api.auth'], function () {
		return \App\User::all();
    }]);
$ php artisan api:routes
+------+----------+----------------+------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-----------+------------+----------+------------+
| Host | Method   | URI            | Name | Action                                                                                                                                                                                                                                                                  | Protected | Version(s) | Scope(s) | Rate Limit |
+------+----------+----------------+------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-----------+------------+----------+------------+
|      | GET|HEAD | /api/protected |      | [{"id":1,"name":"davidwalsh","email":"davidwalsh@test.com","created_at":"2016-10-03 07:48:14","updated_at":"2016-10-03 07:48:14"},{"id":2,"name":"Mohammad Miah","email":"selimcse98@gmail.com","created_at":"2016-10-03 07:50:42","updated_at":"2016-10-03 07:50:42"}] | Yes       | v1         |          |            |
+------+----------+----------------+------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-----------+------------+----------+------------+



http://localhost:8000/api/auth/book/store
{"message":"404 Not Found","status_code":404} //we have to fill the fillable data
App\Book Model protected $fillable = ['title', 'author_name', 'pages_count'];
App\Api\V1\Controllers\BookController@store method implements fillable data

$ curl -X POST -F 'title=New Book' -F "author_name=Author's Name" -F 'pages_count=132' http://localhost:8000/api/book/store?token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOjEsImlzcyI6Imh0dHA6XC9cL2xvY2FsaG9zdDo4MDAwXC9hcGlcL2F1dGhcL2xvZ2luIiwiaWF0IjoxNDc1NTYwNzQ2LCJleHAiOjE0NzU2NDcxNDYsIm5iZiI6MTQ3NTU2MDc0NiwianRpIjoiY2FjNDlmODVhN2JiMzdlMTlhMzY1N2Q0ZTIxMDA3MTcifQ.Qfd4xUCHS3aVd9P7sliW2s-HcjgEECKOyZ8Nkj1Gdkc

$ curl -X POST -F 'title=Written by Nuzhat' -F 'author_name=Nuzhat Selim' -F 'pages_count=432' http://localhost:8000/api/book/store?token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOjIsImlzcyI6Imh0dHA6XC9cL2xvY2FsaG9zdDo4MDAwXC9hcGlcL2F1dGhcL2xvZ2luIiwiaWF0IjoxNDc1NDg0NzcyLCJleHAiOjE0NzU1NzExNzIsIm5iZiI6MTQ3NTQ4NDc3MiwianRpIjoiNWIwMzJhN2IyYjc2M2I2ZDIwNGUyZWJlNjAxNzhmMzEifQ.W5NiTH-NRQ5Ewjrp5gN1O40SAkFYA_Qkr_JdJlS1bt4

curl -X POST -F 'title="My First Book"' -F 'author_name="Mohammad Miah"' -F 'pages_count=232' http://localhost:8000/api/book/store?token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOjIsImlzcyI6Imh0dHA6XC9cL2xvY2FsaG9zdDo4MDAwXC9hcGlcL2F1dGhcL2xvZ2luIiwiaWF0IjoxNDc0MTY0ODQyLCJleHAiOjE0NzQxNjg0NDIsIm5iZiI6MTQ3NDE2NDg0MiwianRpIjoiYmVjMjc2NDUxYjViYmZhYjVlOTU0ODYwZjgwMGYxM2YifQ.sNoh--wvdGH12DgTyCttmz4O2mh4_Sc-cF9uOiclfRI

$ curl -X POST -F 'title="My First Book"' -F 'author_name="Mohammad Miah"' -F 'pages_count=232' http://localhost:8000/api/book/store?token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOjIsImlzcyI6Imh0dHA6XC9cL2xvY2FsaG9zdDo4MDAwXC9hcGlcL2F1dGhcL2xvZ2luIiwiaWF0IjoxNDc0MTY0ODQyLCJleHAiOjE0NzQxNjg0NDIsIm5iZiI6MTQ3NDE2NDg0MiwianRpIjoiYmVjMjc2NDUxYjViYmZhYjVlOTU0ODYwZjgwMGYxM2YifQ.sNoh--wvdGH12DgTyCttmz4O2mh4_Sc-cF9uOiclfRI

Response:
{"message":"Undefined property: app\\Api\\V1\\Controllers\\BookController::$response","status_code":500}

$ curl -X POST -F 'title=Selims book' -F 'author_name=Selim Miah' -F 'pages_count=230' http://localhost:8000/api/book/store?token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOjEsImlzcyI6Imh0dHA6XC9cL2xvY2FsaG9zdDo4MDAwXC9hcGlcL2F1dGhcL2xvZ2luIiwiaWF0IjoxNDc0MzE4Mzc2LCJleHAiOjE0NzQzMjE5NzYsIm5iZiI6MTQ3NDMxODM3NiwianRpIjoiNTRmYzY3ZjljOWUyNWY3N2JmZTk0M2Y4YmIxMDJlM2IifQ.JL3K2gWK_L9jQ--pdzJAsP57RspHrEsy9DrNjwamaHk

Respone: nothing

$ curl -X POST -F 'title=Second_book' -F 'author_name=Mursaleen_Selim' -F 'pages_count=432' http://localhost:8000/api/book/store?token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOjIsImlzcyI6Imh0dHA6XC9cL2xvY2FsaG9zdDo4MDAwXC9hcGlcL2F1dGhcL2xvZ2luIiwiaWF0IjoxNDc0MTg4MDA1LCJleHAiOjE0NzQxOTE2MDUsIm5iZiI6MTQ3NDE4ODAwNSwianRpIjoiMjFkZWIyZjZkZTI5ODBiMWM1YWRjNWM2MTgzOGZlNDEifQ.9A5kdzxIAZo27ZNjpkWyv7szq8zo8v_L45GI9LKfn_o

Response:
{"message":"Undefined property: app\\Api\\V1\\Controllers\\BookController::$response","status_code":500}

curl -X POST -F 'title=Third book' -F 'author_name=Nuzhat Selim' -F 'pages_count=532' http://localhost:8000/api/book/store?token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOjIsImlzcyI6Imh0dHA6XC9cL2xvY2FsaG9zdDo4MDAwXC9hcGlcL2F1dGhcL2xvZ2luIiwiaWF0IjoxNDc0MTg4MDA1LCJleHAiOjE0NzQxOTE2MDUsIm5iZiI6MTQ3NDE4ODAwNSwianRpIjoiMjFkZWIyZjZkZTI5ODBiMWM1YWRjNWM2MTgzOGZlNDEifQ.9A5kdzxIAZo27ZNjpkWyv7szq8zo8v_L45GI9LKfn_o

/api/book will hit App\Api\V1\Controllers\BookController@index method which effectively returns all the books by current authenticated user
curl --request GET http://localhost:8000/api/book?token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOjIsImlzcyI6Imh0dHA6XC9cL2xvY2FsaG9zdDo4MDAwXC9hcGlcL2F1dGhcL2xvZ2luIiwiaWF0IjoxNDc0MTY0ODQyLCJleHAiOjE0NzQxNjg0NDIsIm5iZiI6MTQ3NDE2NDg0MiwianRpIjoiYmVjMjc2NDUxYjViYmZhYjVlOTU0ODYwZjgwMGYxM2YifQ.sNoh--wvdGH12DgTyCttmz4O2mh4_Sc-cF9uOiclfRI

$ curl --request GET http://localhost:8000/api/book?token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOjIsImlzcyI6Imh0dHA6XC9cL2xvY2FsaG9zdDo4MDAwXC9hcGlcL2F1dGhcL2xvZ2luIiwiaWF0IjoxNDc0MTY0ODQyLCJleHAiOjE0NzQxNjg0NDIsIm5iZiI6MTQ3NDE2NDg0MiwianRpIjoiYmVjMjc2NDUxYjViYmZhYjVlOTU0ODYwZjgwMGYxM2YifQ.sNoh--wvdGH12DgTyCttmz4O2mh4_Sc-cF9uOiclfRI

Response:
[{"id":1,"title":"\"My First Book\"","author_name":"\"Mohammad Miah\"","pages_count":232,"user_id":2,"created_at":"2016-09-18 03:04:09","updated_at":"2016-09-18 03:04:09"}]

$ curl --request GET http://localhost:8000/api/book?token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOjIsImlzcyI6Imh0dHA6XC9cL2xvY2FsaG9zdDo4MDAwXC9hcGlcL2F1dGhcL2xvZ2luIiwiaWF0IjoxNDc0MTY0ODQyLCJleHAiOjE0NzQxNjg0NDIsIm5iZiI6MTQ3NDE2NDg0MiwianRpIjoiYmVjMjc2NDUxYjViYmZhYjVlOTU0ODYwZjgwMGYxM2YifQ.sNoh--wvdGH12DgTyCttmz4O2mh4_Sc-cF9uOiclfRI

Response: 
{"message":"Token has expired","status_code":401}
//(App/Config/jwt.php we configured ttl => 60 that means token will expire after an hour, we can change the vale for one day 60*24)
//So, the user need to login again using username and password and a new token will be generated after valid login

$ php artisan api:routes

$ curl --request GET http://localhost:8000/api/protected?token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOjIsImlzcyI6Imh0dHA6XC9cL2xvY2FsaG9zdDo4MDAwXC9hcGlcL2F1dGhcL2xvZ2luIiwiaWF0IjoxNDc0MTg4MDA1LCJleHAiOjE0NzQxOTE2MDUsIm5iZiI6MTQ3NDE4ODAwNSwianRpIjoiMjFkZWIyZjZkZTI5ODBiMWM1YWRjNWM2MTgzOGZlNDEifQ.9A5kdzxIAZo27ZNjpkWyv7szq8zo8v_L45GI9LKfn_o

Response:
{"users":[{"id":1,"name":"Mohammad Miah","email":"selimcse98@gmail.com","created_at":"2016-09-18 01:17:58","updated_at":"2016-09-18 01:17:58"},{"id":2,"name":"davidwalsh","email":"davidwalsh@test.com","created_at":"2016-09-18 01:58:22","updated_at":"2016-09-18 01:58:22"}]}

http://localhost:8000/api/free 
//this url is not protected so it will generate the same result when put it into browser
$api->get('free', function() {
		return \App\User::all();
	});

$ curl --request GET http://localhost:8000/api/book?token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOjEsImlzcyI6Imh0dHA6XC9cL2xvY2FsaG9zdDo4MDAwXC9hcGlcL2F1dGhcL2xvZ2luIiwiaWF0IjoxNDc0MTkyNjE5LCJleHAiOjE0NzQxOTYyMTksIm5iZiI6MTQ3NDE5MjYxOSwianRpIjoiMWIwNDdkYWMxZWI4YTY3NzM4ZjAyZjhmOWM1YzJjY2YifQ.dOMW6AtpuVzXLmjY5FCVa_dBvLdta00J_j1i20V45HU

Response:
[]
//which is an empty json array indicating this user didn't store any books


$ curl --request GET http://localhost:8000/api/book?token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOjEsImlzcyI6Imh0dHA6XC9cL2xvY2FsaG9zdDo4MDAwXC9hcGlcL2F1dGhcL2xvZ2luIiwiaWF0IjoxNDc0MzE4Mzc2LCJleHAiOjE0NzQzMjE5NzYsIm5iZiI6MTQ3NDMxODM3NiwianRpIjoiNTRmYzY3ZjljOWUyNWY3N2JmZTk0M2Y4YmIxMDJlM2IifQ.JL3K2gWK_L9jQ--pdzJAsP57RspHrEsy9DrNjwamaHk

[{"id":4,"title":"Selims book","author_name":"Selim Miah","pages_count":230,"user_id":1,"created_at":"2016-09-19 20:58:05","updated_at":"2016-09-19 20:58:05"}]

$ curl --request GET http://localhost:8000/api/books?token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOjEsImlzcyI6Imh0dHA6XC9cL2xvY2FsaG9zdDo4MDAwXC9hcGlcL2F1dGhcL2xvZ2luIiwiaWF0IjoxNDc0MzE4Mzc2LCJleHAiOjE0NzQzMjE5NzYsIm5iZiI6MTQ3NDMxODM3NiwianRpIjoiNTRmYzY3ZjljOWUyNWY3N2JmZTk0M2Y4YmIxMDJlM2IifQ.JL3K2gWK_L9jQ--pdzJAsP57RspHrEsy9DrNjwamaHk

[{"id":4,"title":"Selims book","author_name":"Selim Miah","pages_count":230,"user_id":1,"created_at":"2016-09-19 20:58:05","updated_at":"2016-09-19 20:58:05"}]


============================= Github ================================

$ git remote -v
origin	https://github.com/francescomalatesta/laravel-api-boilerplate-jwt (fetch)
origin	https://github.com/francescomalatesta/laravel-api-boilerplate-jwt (push)
$ git remote ?
error: Unknown subcommand: ?
usage: git remote [-v | --verbose]
   or: git remote add [-t <branch>] [-m <master>] [-f] [--tags | --no-tags] [--mirror=<fetch|push>] <name> <url>
   or: git remote rename <old> <new>
   or: git remote remove <name>
   or: git remote set-head <name> (-a | --auto | -d | --delete | <branch>)
   or: git remote [-v | --verbose] show [-n] <name>
   or: git remote prune [-n | --dry-run] <name>
   or: git remote [-v | --verbose] update [-p | --prune] [(<group> | <remote>)...]
   or: git remote set-branches [--add] <name> <branch>...
   or: git remote get-url [--push] [--all] <name>
   or: git remote set-url [--push] <name> <newurl> [<oldurl>]
   or: git remote set-url --add <name> <newurl>
   or: git remote set-url --delete <name> <url>

    -v, --verbose         be verbose; must be placed before a subcommand

$ git remote remove origin

$ git remote add origin https://github.com/Selimcse98/Laravel-jwt-api.git

$ git remote -v
origin	https://github.com/Selimcse98/Laravel-jwt-api.git (fetch)
origin	https://github.com/Selimcse98/Laravel-jwt-api.git (push)

$ git status
$ git add .
$ git push -u origin master    

$ git add .env
The following paths are ignored by one of your .gitignore files:
.env
Use -f if you really want to add them.
Mohammads-MacBook-Air:Laravel mohammadselimmiah$ git add -f .env
Mohammads-MacBook-Air:Laravel mohammadselimmiah$ git status

=============================== .env start ===================================
APP_ENV=local
APP_DEBUG=true
APP_KEY=base64:ozkWG7EUCS7dnnurHqqHofK629rfLwiTpgN1lK0hJMI=


DB_HOST=localhost:8889
DB_DATABASE=jwtAPI
DB_USERNAME=root
DB_PASSWORD=root

CACHE_DRIVER=file
SESSION_DRIVER=file
QUEUE_DRIVER=sync

REDIS_HOST=localhost
REDIS_PASSWORD=null
REDIS_PORT=6379

MAIL_DRIVER=smtp
MAIL_HOST=smtp.gmail.com
MAIL_PORT=587
MAIL_USERNAME=wahida.moon80@gmail.com
MAIL_PASSWORD=Nuzxxxxxx
MAIL_ENCRYPTION=tls


API_PREFIX=api
API_VERSION=v1
API_STRICT=false
API_DEBUG=false

API_SIGNUP_TOKEN_RELEASE=true
API_RESET_TOKEN_RELEASE=true
API_RECOVERY_EMAIL_SUBJECT=example@domain.com

=============================== .env end ===================================
===================== version of BookController.php =======================

<?php
namespace app\Api\V1\Controllers;
use Dingo\Api\Http\Response;
use Illuminate\Http\Request;
use App\Http\Requests;
use JWTAuth;
use App\Book;
use Dingo\Api\Routing\Helpers as Helpers;
use App\Http\Controllers\Controller;
class BookController extends Controller
{
    public function index()
    {
        $currentUser = JWTAuth::parseToken()->authenticate();
        return $currentUser
            ->books()
            ->orderBy('created_at', 'DESC')
            ->get()
            ->toArray();
    }
    public function store(Request $request)
    {
        $currentUser = JWTAuth::parseToken()->authenticate();
        $book = new Book;
        $book->title = $request->get('title');
        $book->author_name = $request->get('author_name');
        $book->pages_count = $request->get('pages_count');
        if($currentUser->books()->save($book))
            return $this->response->created();
        else
            return $this->response->error('could_not_create_book', 500);
    }
    public function show($id)
    {
        $currentUser = JWTAuth::parseToken()->authenticate();
        $book = $currentUser->books()->find($id);
        if(!$book)
            throw new NotFoundHttpException;
        return $book;
    }
    public function update(Request $request, $id)
    {
        $currentUser = JWTAuth::parseToken()->authenticate();
        $book = $currentUser->books()->find($id);
        if(!$book)
            throw new NotFoundHttpException;
        $book->fill($request->all());
        if($book->save())
            return $this->response->noContent();
        else
            return $this->response->error('could_not_update_book', 500);
    }
    public function destroy($id)
    {
        $currentUser = JWTAuth::parseToken()->authenticate();
        $book = $currentUser->books()->find($id);
        if(!$book)
            throw new NotFoundHttpException;
        if($book->delete())
            return $this->response->noContent();
        else
            return $this->response->error('could_not_delete_book', 500);
    }
}

====== final version ==================
<?php
namespace App\Api\V1\Controllers;
use JWTAuth;
use App\Book;
use App\Http\Requests;
use Illuminate\Http\Request;
use Dingo\Api\Routing\Helpers;
use App\Http\Controllers\Controller;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
class BookController extends Controller
{
    use Helpers;
    public function index()
    {
        return $this->currentUser()
            ->books()
            ->orderBy('created_at', 'DESC')
            ->get()
            ->toArray();
    }
    public function show($id)
    {
        $book = $this->currentUser()->books()->find($id);
        if(!$book)
            throw new NotFoundHttpException;
        return $book;
    }
    public function store(Request $request)
    {
        $book = new Book;
        $book->title = $request->get('title');
        $book->author_name = $request->get('author_name');
        $book->pages_count = $request->get('pages_count');
        if($this->currentUser()->books()->save($book))
            return $this->response->created();
        else
            return $this->response->error('could_not_create_book', 500);
    }
    public function update(Request $request, $id)
    {
        $book = $this->currentUser()->books()->find($id);
        if(!$book)
            throw new NotFoundHttpException;
        $book->fill($request->all());
        if($book->save())
            return $this->response->noContent();
        else
            return $this->response->error('could_not_update_book', 500);
    }
    public function destroy($id)
    {
        $book = $this->currentUser()->books()->find($id);
        if(!$book)
            throw new NotFoundHttpException;
        if($book->delete())
            return $this->response->noContent();
        else
            return $this->response->error('could_not_delete_book', 500);
    }
    private function currentUser() {
        return JWTAuth::parseToken()->authenticate();
    }
}


https://www.sitepoint.com/how-to-build-an-api-only-jwt-powered-laravel-app/

to fix CORS (Cross Origin Resource Sharing), 
XMLHttpRequest cannot load http://www.api.remoteselfcare.com/rhcApi/api/auth/login. 
No 'Access-Control-Allow-Origin' header is present on the requested resource. 
Origin 'http://localhost:9001' is therefore not allowed access

Add the following at the top of app/public/index.php and app/http/routs_api.php

header('Access-Control-Allow-Origin', 'some url');
header('Allow', 'GET, POST, OPTIONS');
header('Access-Control-Allow-Headers', 'Origin, Content-Type, Accept, Authorization, X-Request-With');
header('Access-Control-Allow-Credentials', 'true');

curl -X POST -F 'name=Mursaleen' -F 'email=mursaleen@gmail.com' -F 'password=something' http://localhost:8000/api/auth/signup
curl -X POST -F 'email=mursaleen@gmail.com' -F 'password=something' http://localhost:8000/api/auth/login
curl -X POST -F 'title=Mursaleens Book' -F "author_name=Mursaleen" -F 'pages_count=132' http://localhost:8000/api/book/store?token=
curl --request GET http://localhost:8000/api/book?token=
curl --request GET http://localhost:8000/api/books?token=
curl --request GET http://localhost:8000/api/books/9?token=
curl -X PUT -d 'title=Mursaleens excellent book' -d 'author_name=Excellent Monon' -d 'pages_count=1234' http://localhost:8000/api/books/8?token=
curl -v -X DELETE http://localhost:8000/api/books/10?token=
curl -i -X DELETE http://localhost:8000/api/books?token=
curl -X POST -F 'email=davidwalsh@test.com' http://localhost:8000/api/auth/recovery

Password reset video help: https://www.youtube.com/watch?v=duMmNEJEZCw

How to test a REST api from command line with curl
http://www.codingpedia.org/ama/how-to-test-a-rest-api-from-command-line-with-curl/#211_Delete_all_podcasts_preparation_step